initialize() {

	initializeMutationRate(1e-7);

	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", 0.0);
	initializeMutationType("m3", 0.5, "f", 0.0);

	initializeGenomicElementType("g1", m1, 1.0);

	initializeGenomicElement(g1, 0, 99);

	rates = c(1e-8, 0.5, 1e-9);

	ends = c(49, 50, 99);


	initializeRecombinationRate(rates, ends);


	defineConstant("simID", getSeed());

	//defineConstant("N", 5000);
	//defineConstant("CR", 0.41);
	//defineConstant("AMR", 0.15);
	//defineConstant("BMR", 0.65);
	//defineConstant("fn", "~/slim_out.delim");

	defineConstant("N", Ni);
	defineConstant("CR", CRi);
	defineConstant("AMR", AMRi);
	defineConstant("BMR", BMRi);
	defineConstant("fn", paste(c("/scratch/aob2x/daphnia_hwe_sims/slim_output/slim",  N, CR, AMR, BMR, simID, ".delim"), sep="_"));


}


modifyChild() {

	A_maleRate = AMR;
	B_maleRate = BMR;

	// tag: 2bit (XY); X = recoreds how THIS indivdiual was generated (1=clonal; 2=sexual); Y = sex of THIS individual (0=female; 1=male); 10=clonal female; 11=clonal male; 20=sexual female; NO 21!!!

	parent1_sexType = parent1.tag%10; // 0 is female; 1 is male
	parent2_sexType = parent2.tag%10;

	child_genotype = childGenome1.countOfMutationsOfType(m2) + childGenome2.countOfMutationsOfType(m2); // 0=ZZ, 1=ZW, 2=WW


	//cat(simID + "\t" + parent1.tag + "\t" + parent2.tag + "\t" + isCloning + "\t" + childGenome1.countOfMutationsOfType(m2) + "," + childGenome2.countOfMutationsOfType(m2) + "\n");

	if(child_genotype == 2) { // WW individuals die
		return F;
	} else if(!isCloning & parent1_sexType==1 & parent2_sexType==1) { // NO male + male sex
		return F;
	} else if(!isCloning & parent1_sexType==0 & parent2_sexType==0) { // NO female + female sex
		return F;
	} else if(isCloning & parent1_sexType==1) { // NO male cloning
		return F;
	} else if(isCloning & parent1_sexType==0) { // female cloning with differential fraction of males and females

		if(child_genotype == 1) {	// A - ZW

			child.tag=rbinom(1, 1, A_maleRate) + 10 ;
			return T;

		} else if(child_genotype == 0) { // B - ZZ

			child.tag=rbinom(1, 1, B_maleRate) + 10;
			return T;

		}

	} else if(!isCloning & (parent1_sexType + parent2_sexType) == 1) { // sexually produced offspring can only be female

		child.tag=20;
		return T;

	} else {
		return F;
	}
}



1 {
	sim.addSubpop("p1", N);
 	p1.setCloningRate(CR);
	p1.individuals.tag = 10;

	line = paste(c("pop", "gen", "n",
				"frac_Clonal_Female", "frac_Clonal_Male",
				"frac_Sexual_Female", "frac_Sexual_Male",
				"fZ",
				"nZZ",
				"nZW",
				"nWW", "neut",
				"simID", "N", "CR", "AMR", "BMR"), sep="\t");

  //writeFile(fn, line, append=F);
}


10 late() {

	 // Define ZW-like locus
		//cat(asInteger(p1.individualCount * (0.001)));
		target = sample(p1.genomes, asInteger(2*p1.individualCount * (0.5)));
		//cat(target);
		target.addNewDrawnMutation(m2, 10);

	// make everybody clonal female at first
		// 1 = NMP = ZW/A; 0 = MP = ZZ/B; 2 = WW = die shorly
		//cat(p1.individuals.countOfMutationsOfType(m2));
		p1.individuals.tag = 10;

  }


200 late() {
	target = sample(p1.genomes, asInteger(2*p1.individualCount * (1-sim.mutationFrequencies(NULL, sim.mutationsOfType(m2)))));
	target.addNewDrawnMutation(m3, 75);
}


1: {
	mut = sim.mutationsOfType(m3);

	if(size(mut)==1) {
		neut_freq=sim.mutationFrequencies(NULL, mut);
	} else {
		neut_freq=0;
	}

	line = ("p1\t" + sim.generation + "\t" + p1.individualCount + "\t" +
		 mean(p1.individuals.tag==11) + "\t" +
		 mean(p1.individuals.tag==10) + "\t" +
		 mean(p1.individuals.tag==21) + "\t" +
		 mean(p1.individuals.tag==20) + "\t" +
		 sim.mutationFrequencies(NULL, sim.mutationsOfType(m2)) + "\t" +
		 sum(p1.individuals.countOfMutationsOfType(m2)==0) + "\t" +
		 sum(p1.individuals.countOfMutationsOfType(m2)==1) + "\t" +
		 sum(p1.individuals.countOfMutationsOfType(m2)==2) + "\t" +
		 neut_freq + "\t" +
		 simID + "\t" + N + "\t" + CR + "\t" + AMR + "\t" + BMR) ;

	 writeFile(fn, line, append=T);
}

500 { sim.simulationFinished(); }
