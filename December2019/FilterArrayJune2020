#Filtering the vcf that includes individual genome sequences from 2016,2017, 2018, and 2019, pulex individuals only.
#Removing snps within 10 basepairs of indels, hard filtering according to gatk's recommendations, and setting low quality genotype scores to missing.

#First remove all snps within 10 basepairs of indels.

#!/bin/bash

#SBATCH -N 1
#SBATCH --ntasks-per-node=1
#SBATCH -t 3:00:00
#SBATCH --mem=60000
#SBATCH -p standard
#SBATCH -A berglandlab

module load bcftools

cd /scratch/kbb7sh/Daphnia/MappingDecember2019

parameterFile="/scratch/kbb7sh/Daphnia/MappingDecember2019/ChrScaffoldList"

varA=$(sed "${SLURM_ARRAY_TASK_ID}!d" $parameterFile | cut -f 1 )

echo ${varA}

bcftools filter --SnpGap 10 MapJune2020_${varA}.vcf -o MapJune2020_${varA}_filtsnps10bpindels.vcf

#Line count of original file was 7,653,841. Line count of ouput file was 5,711,782. Assuming this change in line count accurately reflects the number of snps removed, then 1,942,059 snps were removed.
#Next remove all indels, so the file has only SNPs.

#!/bin/bash

#SBATCH -N 1
#SBATCH --ntasks-per-node=1
#SBATCH -t 6:00:00
#SBATCH --mem=30000
#SBATCH -p standard
#SBATCH -A berglandlab

cd /scratch/kbb7sh/Daphnia/MappingDecember2019

echo running gatk

parameterFile="/scratch/kbb7sh/Daphnia/MappingDecember2019/ChrScaffoldList"

varA=$(sed "${SLURM_ARRAY_TASK_ID}!d" $parameterFile | cut -f 1 )

echo ${varA}

java -Xmx4g -jar /scratch/kbb7sh/Daphnia/GenomeAnalysisTK.jar \
	-T SelectVariants \
	-R /scratch/kbb7sh/genomefiles/totalHiCwithallbestgapclosed.fa \
	-V /scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_${varA}_filtsnps10bpindels.vcf \
    -selectType SNP \
    -o MapJune2020_${varA}_filtsnps10bpindels_snps.vcf

#Line count of file after indels are removed is 3,602,072. Assuming this change in line count accurately reflects the number of indels removed, then 2,109,710 indels were removed.
#Next hard filter the SNPs based on GATK recommendations for organisms with no reference SNP panel.

#!/bin/bash

#SBATCH -N 1
#SBATCH --ntasks-per-node=1
#SBATCH -t 4:00:00
#SBATCH --mem=30000
#SBATCH -p standard
#SBATCH -A berglandlab

cd /scratch/kbb7sh/Daphnia/MappingDecember2019

echo running gatk

parameterFile="/scratch/kbb7sh/Daphnia/MappingDecember2019/ChrScaffoldList"

varA=$(sed "${SLURM_ARRAY_TASK_ID}!d" $parameterFile | cut -f 1 )

echo ${varA}

# Run program

java -Xmx4g -jar /scratch/kbb7sh/Daphnia/GenomeAnalysisTK.jar \
	-T VariantFiltration \
	-R /scratch/kbb7sh/genomefiles/totalHiCwithallbestgapclosed.fa \
	-V /scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_${varA}_filtsnps10bpindels_snps.vcf   \
    --filterExpression "QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0" \
    --filterName "my_snp_filter" \
    -o MapJune2020_${varA}_filtsnps10bpindels_snps_filter.vcf


#!/bin/bash

#SBATCH -N 1
#SBATCH --ntasks-per-node=1
#SBATCH -t 2:00:00
#SBATCH --mem=30000
#SBATCH -p standard
#SBATCH -A berglandlab

cd /scratch/kbb7sh/Daphnia/MappingDecember2019

echo running gatk

parameterFile="/scratch/kbb7sh/Daphnia/MappingDecember2019/ChrScaffoldList"

varA=$(sed "${SLURM_ARRAY_TASK_ID}!d" $parameterFile | cut -f 1 )

echo ${varA}

# Run program


java -Xmx4g -jar /scratch/kbb7sh/Daphnia/GenomeAnalysisTK.jar \
	-T SelectVariants \
	-R /scratch/kbb7sh/genomefiles/totalHiCwithallbestgapclosed.fa \
	-V /scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_${varA}_filtsnps10bpindels_snps_filter.vcf   \
	-ef \
    -o MapJune2020_${varA}_filtsnps10bpindels_snps_filter_pass.vcf

#Filtering out SNPs results in a file with a line count of 2,910,480. Assuming the change in line count reflects the change in SNPs, then 691,592 SNPs were dropped based on filtering.
#Set low GQ (scores less than 10) to zero.

#!/bin/bash

#SBATCH -N 1
#SBATCH --ntasks-per-node=1
#SBATCH -t 2:00:00
#SBATCH --mem=30000
#SBATCH -p standard
#SBATCH -A berglandlab

cd /scratch/kbb7sh/Daphnia/MappingDecember2019

module load bcftools

parameterFile="/scratch/kbb7sh/Daphnia/MappingDecember2019/ChrScaffoldList"

varA=$(sed "${SLURM_ARRAY_TASK_ID}!d" $parameterFile | cut -f 1 )

echo ${varA}

# Run program

bcftools filter -e "FORMAT/GQ<10" -S "." MapJune2020_${varA}_filtsnps10bpindels_snps_filter_pass.vcf | bcftools view -O v -o MapJune2020_${varA}_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf

#Use gatk check variants to make an index.

#!/bin/bash

#SBATCH -N 1
#SBATCH --ntasks-per-node=1
#SBATCH -t 2:00:00
#SBATCH --mem=30000
#SBATCH -p standard
#SBATCH -A berglandlab

cd /scratch/kbb7sh/Daphnia/MappingDecember2019

parameterFile="/scratch/kbb7sh/Daphnia/MappingDecember2019/ChrScaffoldList"

varA=$(sed "${SLURM_ARRAY_TASK_ID}!d" $parameterFile | cut -f 1 )

echo ${varA}

module load gatk

 java -Xmx4g -jar /scratch/kbb7sh/Daphnia/GenomeAnalysisTK.jar \
   -T ValidateVariants \
   -R /scratch/kbb7sh/genomefiles/totalHiCwithallbestgapclosed.fa \
   -V MapJune2020_${varA}_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
   --validationTypeToExclude ALL

#Next merge chromosome VCFs into final VCF

#!/bin/bash

#SBATCH -N 1
#SBATCH --ntasks-per-node=1
#SBATCH -t 2:00:00
#SBATCH --mem=30000
#SBATCH -p standard
#SBATCH -A berglandlab

cd /scratch/kbb7sh/Daphnia/MappingDecember2019

module load bcftools

bcftools concat \
-o MapJune2020.vcf \
MapJune2020_Scaffold_1863_HRSCAF_2081_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_1931_HRSCAF_2197_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_2158_HRSCAF_2565_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_2217_HRSCAF_2652_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_2373_HRSCAF_2879_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_6786_HRSCAF_7541_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_7757_HRSCAF_8726_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_9197_HRSCAF_10753_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_9198_HRSCAF_10754_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_9199_HRSCAF_10755_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_9200_HRSCAF_10757_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf \
MapJune2020_Scaffold_9201_HRSCAF_10758_filtsnps10bpindels_snps_filter_pass_lowGQmiss.vcf



```
Next step will be to import the VCF into R and do further filtering.

Now I will import the VCF into R, and do additional filtering there.
First, I will convert the VCF into gds and seq.gds formats.
```
### libraries
        library(gdsfmt)
        library(SNPRelate)
        library(data.table)
        library(SeqArray)

### format data properly to work with SNPRelate
        ### subsetted data for PCA stuff
                vcf.fn <- "/scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_ann.vcf"
                snpgdsVCF2GDS(vcf.fn, "/scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_ann.gds",
                                        method=c("biallelic.only"), snpfirstdim = FALSE)

                seqVCF2GDS(vcf.fn, "/scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_ann.seq.gds")

```
Now let's open the file and take an intial loook at the SNPs.

```
ijob -A berglandlab -p standard -t 05:00:00 -N 1 -n 1
module load  gcc/7.1.0  openmpi/3.1.4
module load R/3.5.3
module load rstudio
rstudio &

### libraries
		library(gdsfmt)
		library(SNPRelate)
		library(data.table)
		library(ggplot2)
		library(foreach)
		library(lattice)
		library(tidyr)
		library(SeqArray)
		library(tidyverse)

		genofile <- seqOpen("/scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_ann.seq.gds")

		snps <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
				chr = seqGetData(genofile, "chromosome"),
				pos = seqGetData(genofile, "position"),
				dp = seqGetData(genofile, "annotation/info/DP"))

		ggplot(data=snps, aes(x=dp)) + geom_histogram()
		ggplot(data=snps, aes(x=log10(dp))) + geom_histogram()

```
		#Now let's filter out SNPs that occur in areas flagged as having too high or low read depth when mapping the D84A 10X Illumina short reads to the D84Aimages reference genome. Will also filter out SNPs on the edges of runs of Ns and at the ends of scaffolds.
		#Starting with 3,719,919 SNPs.
```

NsChrRD <- fread("/scratch/kbb7sh/Daphnia/genomefiles/NsandDepthandChrEnd.sorted.500merged.bed")
colnames(NsChrRD) <- c("chr", "start", "stop")
NsChrRD$count <- c(1:26531)

setkey(snps, chr, pos)
initialsnps <- snps$variant.ids

NsChrRDsnps <- foreach(i=NsChrRD$count, .combine="c")%do%{

c=NsChrRD$chr[[i]]
s=NsChrRD$start[[i]]
p=NsChrRD$stop[[i]]

temp <- snps[J(data.table(chr=c, pos=c(s:p), key="chr,pos")), nomatch=0]
temp$variant.ids

}

save(NsChrRDsnps, file="NsChrRDsnps_20200622.Rdata")

seqSetFilter(genofile, variant.id=NsChrRDsnps)

NsChrRDsnpssnps <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
	chr = seqGetData(genofile, "chromosome"),
	pos = seqGetData(genofile, "position"),
	dp = seqGetData(genofile, "annotation/info/DP"))

ggplot(data=NsChrRDsnpssnps, aes(x=dp)) + geom_histogram()
ggplot(data=NsChrRDsnpssnps, aes(x=log10(dp))) + geom_histogram()

goodsnpsnotinNsChrRD <- setdiff(initialsnps, NsChrRDsnps)

seqSetFilter(genofile, variant.id=goodsnpsnotinNsChrRD)

goodsnpsnotinNsChrRDtable <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
	chr = seqGetData(genofile, "chromosome"),
	pos = seqGetData(genofile, "position"),
	dp = seqGetData(genofile, "annotation/info/DP"))

ggplot(data=goodsnpsnotinNsChrRDtable, aes(x=dp)) + geom_histogram()
ggplot(data=goodsnpsnotinNsChrRDtable, aes(x=log10(dp))) + geom_histogram()

save(goodsnpsnotinNsChrRDtable, file="goodsnpsnotinNsChrRDtable_2020622.Rdata")

#This resulted in removing 651,900 SNPs, and leaves 3,068,019.

### Now remove SNPs in repeat masker identified regions
#!/usr/bin/env Rscript

### libraries
        library(gdsfmt)
        library(SNPRelate)
        library(data.table)
        library(ggplot2)
        library(foreach)
        library(lattice)
        library(tidyr)
        library(SeqArray)
        library(tidyverse)

		genofile <- seqOpen("/scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_ann.seq.gds")

		load("goodsnpsnotinNsChrRDtable_2020622.Rdata")

		RMout <- fread("/scratch/kbb7sh/Daphnia/genomefiles/RMoutHiCGMgoodscaff.bed")
		colnames(RMout) <- c("chr", "start", "stop")
		RMout$count <- c(1:125881)

		setkey(goodsnpsnotinNsChrRDtable, chr, pos)
		initialsnps <- goodsnpsnotinNsChrRDtable$variant.ids

		RMoutSNPs <- foreach(i=RMout$count, .combine="c")%do%{

			c=RMout$chr[[i]]
			s=RMout$start[[i]]
			p=RMout$stop[[i]]

			temp <- goodsnpsnotinNsChrRDtable[J(data.table(chr=c, pos=c(s:p), key="chr,pos")), nomatch=0]
			temp$variant.ids

		}

		save(RMoutSNPs, file="RMoutSNPs_20200622.Rdata")

		seqSetFilter(genofile, variant.id=RMoutSNPs)

		RMoutSNPssnps <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
			chr = seqGetData(genofile, "chromosome"),
			pos = seqGetData(genofile, "position"),
			dp = seqGetData(genofile, "annotation/info/DP"))

		ggplot(data=RMoutSNPssnps, aes(x=dp)) + geom_histogram()
		ggplot(data=RMoutSNPssnps, aes(x=log10(dp))) + geom_histogram()

		goodsnpsnotinNsChrRDorRM <- setdiff(initialsnps, RMoutSNPs)

		seqSetFilter(genofile, variant.id=goodsnpsnotinNsChrRDorRM)

		goodsnpsnotinNsChrRDorRMtable <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
			chr = seqGetData(genofile, "chromosome"),
			pos = seqGetData(genofile, "position"),
			dp = seqGetData(genofile, "annotation/info/DP"))

		ggplot(data=goodsnpsnotinNsChrRDorRMtable, aes(x=dp)) + geom_histogram()
		ggplot(data=goodsnpsnotinNsChrRDorRMtable, aes(x=log10(dp))) + geom_histogram()

		save(goodsnpsnotinNsChrRDorRMtable, file="goodsnpsnotinNsChrRDorRMtable_20200622.Rdata")

### Removing repeat masker regions resulted in a loss of 320,003 SNPs with 2,748,016 SNPs remaining.

###Now remove triallelic snps
			goodsnpsnotinNsChrRDorRM <- goodsnpsnotinNsChrRDorRMtable$variant.ids

			seqSetFilter(genofile, variant.id=goodsnpsnotinNsChrRDorRM)

			tri <- (seqGetData(genofile, "$num_allele"))
			tri <- as.data.table(tri)
			tri$variant.ids <- seqGetData(genofile, "variant.id")
			tri$diallelic <- ifelse(tri$tri=="2", 1, 0)

			updatesnpstouse <- tri$variant.ids[tri$tri=="2"]

			save(updatesnpstouse, file="updatesnpstouse_depthfiltandnotrialleleic_20200623.Rdata")

			seqSetFilter(genofile, variant.id=updatesnpstouse)

			snps <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
						chr = seqGetData(genofile, "chromosome"),
						pos = seqGetData(genofile, "position"),
						dp = seqGetData(genofile, "annotation/info/DP"))

### Removing triallelic SNPs resulted in a loss of 81,624 SNPs, with 2,666,392 remaining

### Overall read depth filtering on snps

			quantile(snps$dp,probs=c(0.05,0.95))

			#5%   95%
			#3497 12115

			lowRDsnps <- snps[dp < 3497]
			highRDsnps <- snps[dp > 12115]
			lowRDsnps$RD <- c("low")
			highRDsnps$RD <- c("high")
			lowhighRDsnps <- rbind(lowRDsnps, highRDsnps)

			save(lowhighRDsnps, file="lowhighRDsnps_20200623.Rdata")

			dpfiltsnps <- snps[dp > 3496 & dp < 12114]
			dpfiltsnpsids <- dpfiltsnps$variant.ids

			save(dpfiltsnps, file="dpfiltsnps_20200623.Rdata")

			ggplot(data=dpfiltsnps, aes(x=dp)) + geom_histogram()
			ggplot(data=dpfiltsnps, aes(x=log10(dp))) + geom_histogram()

			seqSetFilter(genofile, variant.id=dpfiltsnpsids)

			snpsG <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
					chr = seqGetData(genofile, "chromosome"),
					pos = seqGetData(genofile, "position"),
					dp = seqGetData(genofile, "annotation/info/DP"))

### Resulted in a removal of 266,515 SNPs, leaving 2,399,653 SNPs.

### Now let's pull out the already identified pulicaria and obtusa and very low coverage ind, and then do a final check that new individuals are all pulex

		sample.ids <- seqGetData(genofile, "sample.id")
		sampleidsdt <- as.data.table(sample.ids)
		samplestouseB <- sampleidsdt$sample.ids[sample.ids!="Spring_2017_DBunk_340" &
		sample.ids!="March20_2018_DBunk_39" & sample.ids!="Fall_2016_D10_54" &
		sample.ids!="March20_2018_D8_19" & sample.ids!="March15_2019_DBunk_MomPE1" &
		sample.ids!="March15_2019_DBunk_MomPE20" & sample.ids!="April_2017_Dbarb_11" &
		sample.ids!="March20_2018_DBunk_26" & sample.ids!="March20_2018_DBunk_37" &
		sample.ids!="March20_2018_DBunk_42" & sample.ids!="March20_2018_DBunk_10" &
		sample.ids!="March20_2018_DBunk_18" & sample.ids!="March20_2018_DBunk_21" &
		sample.ids!="March20_2018_DBunk_22" & sample.ids!="March20_2018_DBunk_23" &
		sample.ids!="March20_2018_DBunk_38" & sample.ids!="March20_2018_DBunk_40" &
		sample.ids!="March20_2018_DBunk_41" & sample.ids!="March20_2018_DBunk_43" &
		sample.ids!="2018_Pulicaria_Pond21_22" & sample.ids!="2018_Pulicaria_Pond22_21" &
		sample.ids!="2018_Pulicaria_Pond22_53" & sample.ids!="2018_Pulicaria_Pond22_62" &
		sample.ids!="2018_Pulicaria_Pond22_72"]

		seqSetFilter(genofile, sample.id=samplestouseB)

	### set some global parameters
		maf <- 0.001
		missing.rate <- 0.15
		threads <- 10

	#Let's temporarily use a previous LD SNPset.
		load("./../mhet_20200121.Rdata")
		muhetsub <- data.table(chr=mhet$chr, pos=mhet$pos)
		setkey(snpsG, chr, pos)
		setkey(muhetsub, chr, pos)
		snpstouse <- merge(muhetsub, snpsG)
		snpstouseids <- snpstouse$variant.ids

		pca <- snpgdsPCA(genofile, snp.id=snpstouseids, sample.id=samplestouseB, autosome.only=FALSE, maf=maf,
				missing.rate=missing.rate, num.thread=threads)
		#Working space: 569 samples, 309,877 SNVs

		pc.percent <- pca$varprop*100
		head(round(pc.percent, 2))
		#	[1] 22.83 14.12  7.56  6.37  4.79  3.90

		tab <- data.frame(clone = pca$sample.id,
			EV1 = pca$eigenvect[,1],
			EV2 = pca$eigenvect[,2],
			stringsAsFactors = FALSE)
		head(tab)

		temp <- unlist(strsplit(tab$clone, split="_"))
		mat <- matrix(temp, ncol=4, byrow=TRUE)
		matdat <- as.data.table(mat)
		tab$population <- matdat$V3
		tab$year <- matdat$V2
		tab$season <- matdat$V1
		tab$popseason <- paste(tab$population,"_",tab$season, sep="")
		tab$season2 <- ifelse(tab$season=="April", "Spring", tab$season)
		tab$seasonyear <- paste(tab$year,"_",tab$season2, sep="")

		tab <- as.data.table(tab)

		PCAall <- ggplot(data=tab, aes(x=EV1, y=EV2, color=population)) + geom_point()
		ggsave(PCAall, file="PCAall_20200623.pdf")

		PCAnoW <- ggplot(data=tab[population!="W1" & population!="W6" &
				population!="D10"], aes(x=EV1, y=EV2, color=popseason)) + geom_point()
		ggsave(PCAnoW, file="PCAnoW_20200623.pdf")

### Confirmed! No more non-pulex individuals.

### Ok, now let's remove all SNPs that are fixed within pulex

	sample.ids <- seqGetData(genofile, "sample.id")
	sampleidsdt <- as.data.table(sample.ids)
	samplestouseB <- sampleidsdt$sample.ids[sample.ids!="Spring_2017_DBunk_340" &
	sample.ids!="March20_2018_DBunk_39" & sample.ids!="Fall_2016_D10_54" &
	sample.ids!="March20_2018_D8_19" & sample.ids!="March15_2019_DBunk_MomPE1" &
	sample.ids!="March15_2019_DBunk_MomPE20" & sample.ids!="April_2017_Dbarb_11" &
	sample.ids!="March20_2018_DBunk_26" & sample.ids!="March20_2018_DBunk_37" &
	sample.ids!="March20_2018_DBunk_42" & sample.ids!="March20_2018_DBunk_10" &
	sample.ids!="March20_2018_DBunk_18" & sample.ids!="March20_2018_DBunk_21" &
	sample.ids!="March20_2018_DBunk_22" & sample.ids!="March20_2018_DBunk_23" &
	sample.ids!="March20_2018_DBunk_38" & sample.ids!="March20_2018_DBunk_40" &
	sample.ids!="March20_2018_DBunk_41" & sample.ids!="March20_2018_DBunk_43" &
	sample.ids!="2018_Pulicaria_Pond21_22" & sample.ids!="2018_Pulicaria_Pond22_21" &
	sample.ids!="2018_Pulicaria_Pond22_53" & sample.ids!="2018_Pulicaria_Pond22_62" &
	sample.ids!="2018_Pulicaria_Pond22_72"]

	seqSetFilter(genofile, sample.id=samplestouseB)

	seqSetFilter(genofile, variant.id=dpfiltsnpsids)

	snps.dt <- data.table(variant.ids=seqGetData(genofile, "variant.id"),
												af=seqAlleleFreq(genofile, .progress=T))

### filter down to ones that are polymorphic in pulex
	pulexPoly <- snps.dt[af!=1 & af!=0]

	setkey(dpfiltsnps, variant.ids)
	setkey(pulexPoly, variant.ids)

	snpsvarPulex <- merge(dpfiltsnps, pulexPoly)

	save(snpsvarPulex, file="snpsvarPulex_20200623.Rdata")

### Removing SNPs non variable in D. pulex results in a loss of 1,885,777 SNPs, with 513,876 remaining.

## Ok, now let's check number of individuals per snp and number of snps per index

				load("snpsvarPulex_20200623.Rdata"))
				snpstousevarPulex <- snpsvarPulex$variant.ids
				seqSetFilter(genofile, variant.id=snpstousevarPulex)

	#!/usr/bin/env Rscript

	### libraries
		library(gdsfmt)
		library(SNPRelate)
		library(data.table)
		library(ggplot2)
		library(foreach)
		library(lattice)
		library(tidyr)
		library(SeqArray)
		library(tidyverse)

		genofile <- seqOpen("/scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_ann.seq.gds")

		load("snpsvarPulex_20200623.Rdata")
		snpstousevarPulex <- snpsvarPulex$variant.ids
		seqSetFilter(genofile, variant.id=snpstousevarPulex)

		sample.ids <- seqGetData(genofile, "sample.id")
		sampleidsdt <- as.data.table(sample.ids)
		samplestouseB <- sampleidsdt$sample.ids[sample.ids!="Spring_2017_DBunk_340" &
			sample.ids!="March20_2018_DBunk_39" & sample.ids!="Fall_2016_D10_54" &
			sample.ids!="March20_2018_D8_19" & sample.ids!="March15_2019_DBunk_MomPE1" &
			sample.ids!="March15_2019_DBunk_MomPE20" & sample.ids!="April_2017_Dbarb_11" &
			sample.ids!="March20_2018_DBunk_26" & sample.ids!="March20_2018_DBunk_37" &
			sample.ids!="March20_2018_DBunk_42" & sample.ids!="March20_2018_DBunk_10" &
			sample.ids!="March20_2018_DBunk_18" & sample.ids!="March20_2018_DBunk_21" &
			sample.ids!="March20_2018_DBunk_22" & sample.ids!="March20_2018_DBunk_23" &
			sample.ids!="March20_2018_DBunk_38" & sample.ids!="March20_2018_DBunk_40" &
			sample.ids!="March20_2018_DBunk_41" & sample.ids!="March20_2018_DBunk_43" &
			sample.ids!="2018_Pulicaria_Pond21_22" & sample.ids!="2018_Pulicaria_Pond22_21" &
			sample.ids!="2018_Pulicaria_Pond22_53" & sample.ids!="2018_Pulicaria_Pond22_62" &
			sample.ids!="2018_Pulicaria_Pond22_72"]

	#Pull out genotypes

			seqSetFilter(genofile, sample.id=samplestouseB)

			het <- t(seqGetData(genofile, "$dosage"))
			het <- as.data.table(het)

			colnames(het) <- c(seqGetData(genofile, "sample.id"))
			het$variant.ids <- seqGetData(genofile, "variant.id")

			setkey(het, variant.ids)
			setkey(snpsvarPulex, variant.ids)

			mhet <- merge(snpsvarPulex, het)

	# Set all genotypes to 1

			mhet[mhet == 0] <- 1
			mhet[mhet == 2] <- 1

			mhetlong <- melt(mhet, measure.vars=samplestouseB, variable.name="clone", value.name="dosage")

			save(mhetlong, file="mhetlong_countinggenotypespersnp_20200623.Rdata")

			mhetlong.ag <- mhetlong[,list(numgeno = sum(dosage, na.rm=TRUE)), list(variant.ids) ]

			save(mhetlong.ag, file="mhetlong.ag_countinggenotypespersnp_20200623.Rdata")

# Having done this, let's look at the distribution of number of individuals genotypes per SNP.

			indpersnp <- ggplot(data=mhetlong.ag, aes(x=numgeno)) + geom_histogram(binwidth=10)
			ggsave(indpersnp, file="indpersnp_20200623.pdf")

		# Let's drop SNPs that are genotyped in less than half the individuals, this drops 3,071 SNPs and leaves 510,805
			snpsvarpulexpresentinhalf <- mhetlong.ag$variant.ids[mhetlong.ag$numgeno>283]

			seqSetFilter(genofile, variant.id=snpsvarpulexpresentinhalf)

			save(snpsvarpulexpresentinhalf, file="snpsvarpulexpresentinhalf_20200623.Rdata")

			snpsvarPulex <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
						chr = seqGetData(genofile, "chromosome"),
						pos = seqGetData(genofile, "position"),
						dp = seqGetData(genofile, "annotation/info/DP"))

			write.table(snpsvarPulex, file="snpsvarpulexpresentinhalf_table_20200623", sep="\t", row.names=FALSE, quote=FALSE)



### Let's look for SNPs that are polymorphic within D8, DCat, DBunk

	sample.ids <- seqGetData(genofile, "sample.id")
	sampleidsdt <- as.data.table(sample.ids)

	temp <- unlist(strsplit(as.character(sampleidsdt$sample.ids), split="_"))
	mat <- matrix(temp, ncol=4, byrow=TRUE)
	matdat <- as.data.table(mat)
	sampleidsdt$population <- matdat$V3
	sampleidsdtD8DBunkDCat <- sampleidsdt[population=="D8" | population=="DBunk" | population=="DCat"]
	sampleidsdtD8DBunkDCatD10W <- sampleidsdt[population=="D8" | population=="DBunk" | population=="DCat" | population=="D10" | population=="W1" | population=="W6"]

	sc <- fread("Superclones201617182019withObtusaandPulicaria_kingcorr_20200623_wmedrd.txt")
	scsub <- sc[population=="D8" | population=="DBunk" | population=="DCat" | population=="D10" | population=="W1" | population=="W6"]
	scsubB <- scsub[Nonindependent==0 & Species!="obtusa"]
	scsubBC <- data.table(sample.ids=scsubB$clone)
	setkey(scsubBC, sample.ids)
	setkey(sampleidsdt, sample.ids)
	m <- merge(scsubBC, sampleidsdt)
	seqSetFilter(genofile, sample.id=m$sample.ids)

	snps.dt <- data.table(variant.ids=seqGetData(genofile, "variant.id"),
			af=seqAlleleFreq(genofile, .progress=T))

	#pulexD8DCatDBunkD10WPoly <- snps.dt[af < 0.975 & af>0.025]
	pulexD8DCatDBunkD10WPoly <- snps.dt[af < 0.98 & af>0.02]
	pulexD8DCatDBunkD10WPoly <- snps.dt[af < 0.995 & af>0.005]

	pulexD8DCatDBunkD10WPolyids <- pulexD8DCatDBunkD10WPoly$variant.ids
	seqSetFilter(genofile, variant.id=pulexD8DCatDBunkD10WPolyids)

	save(pulexD8DCatDBunkD10WPolyids, file="pulexD8DCatDBunkD10WPolyids_maf0.005_20210311.Rdata")

	seqGDS2VCF(genofile, "polyDorsetall.vcf.gz")


	samplestouseB <- sampleidsdtD8DBunkDCat$sample.ids[sample.ids!="Spring_2017_DBunk_340" &
		sample.ids!="March20_2018_DBunk_39" & sample.ids!="Fall_2016_D10_54" &
		sample.ids!="March20_2018_D8_19" & sample.ids!="March15_2019_DBunk_MomPE1" &
		sample.ids!="March15_2019_DBunk_MomPE20" & sample.ids!="April_2017_Dbarb_11" &
		sample.ids!="March20_2018_DBunk_26" & sample.ids!="March20_2018_DBunk_37" &
		sample.ids!="March20_2018_DBunk_42" & sample.ids!="March20_2018_DBunk_10" &
		sample.ids!="March20_2018_DBunk_18" & sample.ids!="March20_2018_DBunk_21" &
		sample.ids!="March20_2018_DBunk_22" & sample.ids!="March20_2018_DBunk_23" &
		sample.ids!="March20_2018_DBunk_38" & sample.ids!="March20_2018_DBunk_40" &
		sample.ids!="March20_2018_DBunk_41" & sample.ids!="March20_2018_DBunk_43"]

	seqSetFilter(genofile, sample.id=samplestouseB)

	snps.dt <- data.table(variant.ids=seqGetData(genofile, "variant.id"),
			af=seqAlleleFreq(genofile, .progress=T))

### filter down to ones that are polymorphic in pulex and MAF of at least 0.05
	#pulexD8DCatDBunkPoly <- snps.dt[af!=1 & af!=0]
	pulexD8DCatDBunkPoly <- snps.dt[af < 0.95 & af>0.05]

	pulexD8DCatDBunkPolyids <- pulexD8DCatDBunkPoly$variant.ids
	seqSetFilter(genofile, variant.id=pulexD8DCatDBunkPolyids)

	save(pulexD8DCatDBunkPolyids, file="pulexD8DCatDBunkPolyids_20200623.Rdata")

	seqGDS2VCF(genofile, "polyDorsetMAF005.vcf.gz")

### Could we also pull out fixed A vs C SNPs (using prior to LD pruned set)
	sc <- fread("/scratch/kbb7sh/Daphnia/MappingDecember2019/WithPulicaria/Superclones201617182019withObtusaandPulicaria_kingcorr_20200402_wmedrd.txt")
	scAC <- sc[SC=="A" | SC=="C"]
	scACids <- scAC$clone
	seqSetFilter(genofile, sample.id=scACids)

# Pull out genotypes
	het <- t(seqGetData(genofile, "$dosage"))
	het <- as.data.table(het)

	colnames(het) <- c(seqGetData(genofile, "sample.id"))
	het$variant.ids <- seqGetData(genofile, "variant.id")

	setkey(het, variant.ids)
	setkey(snps, variant.ids)

	mhet <- merge(snps, het)

	mhetlong <- melt(mhet, measure.vars=scACids, variable.name="clone", value.name="dosage")

	setkey(scAC, clone)
	setkey(mhetlong, clone)
	mmhetlong <- merge(mhetlong, scAC)
	mmhetlong <- mmhetlong[Nonindependent==0]

	SCcounts <- mmhetlong[, .N, by=list(SC, variant.ids, dosage)]

#Remove NAs
	SCcounts <- SCcounts[dosage!="NA"]
	SCcountsA <- SCcounts[SC=="A"]
	SCcountsC <- SCcounts[SC=="C"]

	SCcountsAwide <- dcast(SCcountsA, variant.ids ~ dosage, value.var="N")
	colnames(SCcountsAwide) <- c("variant.ids", "Ados0", "Ados1", "Ados2")
	SCcountsAwide[is.na(Ados0),Ados0:=0]
	SCcountsAwide[is.na(Ados1),Ados1:=0]
	SCcountsAwide[is.na(Ados2),Ados2:=0]

	SCcountsCwide <- dcast(SCcountsC, variant.ids ~ dosage, value.var="N")
	colnames(SCcountsCwide) <- c("variant.ids", "Cdos0", "Cdos1", "Cdos2")
	SCcountsCwide[is.na(Cdos0),Cdos0:=0]
	SCcountsCwide[is.na(Cdos1),Cdos1:=0]
	SCcountsCwide[is.na(Cdos2),Cdos2:=0]

	setkey(SCcountsAwide, variant.ids)
	setkey(SCcountsCwide, variant.ids)
	SCcountsAC <- merge(SCcountsAwide, SCcountsCwide)

	SCcountsAC$Atot <- SCcountsAC$Ados0+SCcountsAC$Ados1+SCcountsAC$Ados2
	SCcountsAC$Ctot <- SCcountsAC$Cdos0+SCcountsAC$Cdos1+SCcountsAC$Cdos2

	SCcountsACfilt <- SCcountsAC[Atot>59 & Ctot>19]

	SCcountsACfiltACfix <- SCcountsACfilt[Ados0==Atot & Cdos2==Ctot]
	SCcountsACfiltCAfix <- SCcountsACfilt[Ados2==Atot & Cdos0==Ctot]

	ACfixed <- rbind(SCcountsACfiltACfix, SCcountsACfiltCAfix)
	ACfixedids <- ACfixed$variant.ids
	save(ACfixed, file="ACfixed_20200623.Rdata")

	Ahet <- SCcountsACfilt[Ados1==Atot]
	save(Ahet, file="Ahet_20200623.Rdata")
	Ahetids <- Ahet$variant.ids

	seqSetFilter(genofile, variant.id=Ahetids)
	seqSetFilter(genofile, sample.id=c("AxB_R1_P110_A", "D8179_R1_P58_A"))

	het <- t(seqGetData(genofile, "$dosage"))
	het <- as.data.table(het)

	colnames(het) <- c(seqGetData(genofile, "sample.id"))
	het$variant.ids <- seqGetData(genofile, "variant.id")

	setkey(het, variant.ids)
	setkey(snpsvarPulex, variant.ids)

	mhet <- merge(snpsvarPulex, het)

	Chet <- SCcountsACfilt[Cdos1==Ctot]
	save(Chet, file="Chet_20200624.Rdata")
	Chetids <- Chet$variant.ids

	scB <- fread("/scratch/kbb7sh/Daphnia/MappingDecember2019/June2020/Superclones201617182019withObtusaandPulicaria_kingcorr_20200623_wmedrd.txt")
	selfedC <- scB[SC=="selfedC"]
	selfedCids <- selfedC$clone

	seqSetFilter(genofile, variant.id=Chetids)
	seqSetFilter(genofile, sample.id=selfedCids)

	het <- t(seqGetData(genofile, "$dosage"))
	het <- as.data.table(het)

	colnames(het) <- c(seqGetData(genofile, "sample.id"))
	het$variant.ids <- seqGetData(genofile, "variant.id")

	setkey(het, variant.ids)
	setkey(snpsvarPulex, variant.ids)

	mhet <- merge(snpsvarPulex, het)

	mhetlong <- melt(mhet, measure.vars=selfedCids, variable.name="clone", value.name="dosage")

	SCcounts <- mhetlong[, .N, by=list(clone, dosage)]

	SCcounts <- SCcounts[dosage!="NA"]

	SCcountswide <- dcast(SCcounts, clone ~ dosage, value.var="N")
	colnames(SCcountswide) <- c("variant.ids", "dos0", "dos1", "dos2")
	SCcountswide[is.na(dos0),dos0:=0]
	SCcountswide[is.na(dos1),dos1:=0]
	SCcountswide[is.na(dos2),dos2:=0]

	SCcountswide$tot <- SCcountswide$dos0+SCcountswide$dos1+SCcountswide$dos2
	SCcountswide$prophet <- SCcountswide$dos1/SCcountswide$tot


#Now let's look at these SNPs in everyone

	seqResetFilter(genofile)

	sample.ids <- seqGetData(genofile, "sample.id")
	sampleidsdt <- as.data.table(sample.ids)
	samplestouseB <- sampleidsdt$sample.ids[sample.ids!="Spring_2017_DBunk_340" &
		sample.ids!="March20_2018_DBunk_39" & sample.ids!="Fall_2016_D10_54" &
		sample.ids!="March20_2018_D8_19" & sample.ids!="March15_2019_DBunk_MomPE1" &
		sample.ids!="March15_2019_DBunk_MomPE20" & sample.ids!="April_2017_Dbarb_11" &
		sample.ids!="March20_2018_DBunk_26" & sample.ids!="March20_2018_DBunk_37" &
		sample.ids!="March20_2018_DBunk_42" & sample.ids!="March20_2018_DBunk_10" &
		sample.ids!="March20_2018_DBunk_18" & sample.ids!="March20_2018_DBunk_21" &
		sample.ids!="March20_2018_DBunk_22" & sample.ids!="March20_2018_DBunk_23" &
		sample.ids!="March20_2018_DBunk_38" & sample.ids!="March20_2018_DBunk_40" &
		sample.ids!="March20_2018_DBunk_41" & sample.ids!="March20_2018_DBunk_43" &
		sample.ids!="2018_Pulicaria_Pond21_22" & sample.ids!="2018_Pulicaria_Pond22_21" &
		sample.ids!="2018_Pulicaria_Pond22_53" & sample.ids!="2018_Pulicaria_Pond22_62" &
		sample.ids!="2018_Pulicaria_Pond22_72"]


	seqSetFilter(genofile, sample.id=samplestouseB)
	seqSetFilter(genofile, variant.id=ACfixedids)



# Get genotypes

	het <- t(seqGetData(genofile, "$dosage"))
	het <- as.data.table(het)

	colnames(het) <- c(seqGetData(genofile, "sample.id"))
	het$variant.ids <- seqGetData(genofile, "variant.id")

	setkey(het, variant.ids)
	setkey(snpsvarPulex, variant.ids)

	mhet <- merge(snpsvarPulex, het)

	mhetlong <- melt(mhet, measure.vars=samplestouseB, variable.name="clone", value.name="dosage")

	setkey(mhetlong, variant.ids)
	setkey(ACfixed, variant.ids)
	mhetlongACinfo <- merge(mhetlong, ACfixed)

	mhetlongACinfo$ACsnp <- ifelse(mhetlongACinfo$Ados0 > mhetlongACinfo$Cdos2, "Asnp", "Csnp")
	mhetlongACinfo$dosageB <- ifelse(mhetlongACinfo$dosage==1, 1, ifelse(mhetlongACinfo$dosage==0 & mhetlongACinfo$ACsnp=="Asnp", 2, ifelse(
		mhetlongACinfo$dosage==2 & mhetlongACinfo$ACsnp=="Asnp", 0, mhetlongACinfo$dosage
		)))

	clonecounts <- mhetlongACinfo[, .N, by=list(clone, dosageB)]
	clonecounts <- clonecounts[dosageB!="NA"]

	clonecountswide <- dcast(clonecounts, clone ~ dosageB, value.var="N")
	colnames(clonecountswide) <- c("clone", "HomC", "Het", "HomA")
	clonecountswide[is.na(HomC),HomC:=0]
	clonecountswide[is.na(Het),Het:=0]
	clonecountswide[is.na(HomA),HomA:=0]

	clonecountswide$total <- clonecountswide$HomC+clonecountswide$Het+clonecountswide$HomA
	clonecountswide$propC <- clonecountswide$HomC/clonecountswide$total
	clonecountswide$propHet <- clonecountswide$Het/clonecountswide$total
	clonecountswide$propA <- clonecountswide$HomA/clonecountswide$total

	setkey(clonecountswide, clone)
	setkey(sc, clone)
	mclonecountswide <- merge(clonecountswide, sc, all.x=TRUE)

	mclonecountswide$ACF1hybrid <- ifelse(mclonecountswide$propHet > 0.9, 1, 0)

	save(mclonecountswide, file="mclonecountswide_ACfixedSNPs_20200623.Rdata")

### Let's quickly look at number of snps per individuals

#!/usr/bin/env Rscript

### libraries
	library(gdsfmt)
	library(SNPRelate)
	library(data.table)
	library(ggplot2)
	library(foreach)
	library(lattice)
	library(tidyr)
	library(SeqArray)
	library(tidyverse)

# Load data file

	load("mhetlong_countinggenotypespersnp_20200623.Rdata")

	mhetlong.ag.byclone <- mhetlong[,list(numgeno = sum(dosage, na.rm=TRUE)), list(clone) ]

	save(mhetlong.ag.byclone, file="mhetlong.ag.byclone_countinggenotypespersnp_20200623.Rdata")

### Let's make a vcf for KING with all D8, DBunk, and DCat individuals, and the lab generated clones

		sample.ids <- seqGetData(genofile, "sample.id")
		sampleidsdt <- as.data.table(sample.ids)

		temp <- unlist(strsplit(as.character(sampleidsdt$sample.ids), split="_"))
		mat <- matrix(temp, ncol=4, byrow=TRUE)
		matdat <- as.data.table(mat)
		sampleidsdt$population <- matdat$V3
		sampleidsdt$population <- ifelse(sampleidsdt$population=="Dcat", "DCat", sampleidsdt$population)
		sampleidsdtsub <- sampleidsdt[population!="D10" & population!="DLily" & population!="DMud" &
			population!="DOil" & population!="Dramp" & population!="W1" & population!="W6"]

		samplestouseB <- sampleidsdtsub$sample.ids[sample.ids!="Spring_2017_DBunk_340" &
		sample.ids!="March20_2018_DBunk_39" & sample.ids!="Fall_2016_D10_54" &
			sample.ids!="March20_2018_D8_19" & sample.ids!="March15_2019_DBunk_MomPE1" &
			sample.ids!="March15_2019_DBunk_MomPE20" & sample.ids!="April_2017_Dbarb_11" &
			sample.ids!="March20_2018_DBunk_26" & sample.ids!="March20_2018_DBunk_37" &
			sample.ids!="March20_2018_DBunk_42" & sample.ids!="March20_2018_DBunk_10" &
			sample.ids!="March20_2018_DBunk_18" & sample.ids!="March20_2018_DBunk_21" &
			sample.ids!="March20_2018_DBunk_22" & sample.ids!="March20_2018_DBunk_23" &
			sample.ids!="March20_2018_DBunk_38" & sample.ids!="March20_2018_DBunk_40" &
			sample.ids!="March20_2018_DBunk_41" & sample.ids!="March20_2018_DBunk_43" &
			sample.ids!="2018_Pulicaria_Pond21_22" & sample.ids!="2018_Pulicaria_Pond22_21" &
			sample.ids!="2018_Pulicaria_Pond22_53" & sample.ids!="2018_Pulicaria_Pond22_62" &
			sample.ids!="2018_Pulicaria_Pond22_72" & sample.ids!="April_2017_D8_515R" &
			sample.ids!="Lab_2019_D8_222Male" & sample.ids!="Lab_2019_D8_349Male" &
			sample.ids!="May_2017_D8_731SM" & sample.ids!="May_2017_D8_770SM" &
			sample.ids!="May_2017_D8_773SM" & sample.ids!="Spring_2017_DBunk_116SM" &
			sample.ids!="Spring_2017_DBunk_347SM" & sample.ids!="Spring_2017_DBunk_73SM" &
			sample.ids!="Spring_2016_D8_8.1" & sample.ids!="March_2018_D8_18030" &
			sample.ids!="March_2018_DCat_18004"]

		samplestouseB <- samplestouseB[1:515]

		#samplestouseB <- c("AxB_R2_P102_A", "March20_2018_D8_18010", "March20_2018_DCat_18031", "March20_2018_DCat_18048")

		seqSetFilter(genofile, sample.id=samplestouseB)

		seqSetFilter(genofile, variant.id=pulexD8DCatDBunkPolyids)

		seqGDS2VCF(genofile, "polyDorsetMAF005withlabgenerated.vcf.gz")

		dp <- t((seqGetData(genofile, "annotation/format/DP"))$data)
		dp <- as.data.table(dp)

		colnames(dp) <- c(seqGetData(genofile, "sample.id"))
		dp$variant.ids <- seqGetData(genofile, "variant.id")

		dplong <- melt(dp, measure.vars=samplestouseB, variable.name="clone", value.name="dp")
		dplong.ag <- dplong[,list(medrd = median(dp, na.rm=TRUE)), list(clone)]

		save(dplong.ag, file="dplong.ag_subsetofclones_20200624.Rdata")

	#For now lets proceed with SNP pruning and IBS superclone assignment, and see where low coverage individuals fall out
	# For now setting maf pretty low, so SNPs are kept even if present in 1 individual, can also try in 2 ind to compare

	#!/usr/bin/env Rscript

	### libraries
					library(gdsfmt)
					library(SNPRelate)
					library(data.table)
					library(ggplot2)
	        library(foreach)
	        library(lattice)
	        library(tidyr)
	        library(SeqArray)
					library(dplyr)
					library(tidyverse)

	#Load genotype file
		genofile <- seqOpen("/scratch/kbb7sh/Daphnia/MappingDecember2019/MapJune2020_ann.seq.gds")

	#Load SNP file
		load("snpsvarpulexpresentinhalf_20200623.Rdata")
		seqSetFilter(genofile, variant.id=snpsvarpulexpresentinhalf)

	# Set individual filter
		sample.ids <- seqGetData(genofile, "sample.id")
		sampleidsdt <- as.data.table(sample.ids)

		temp <- unlist(strsplit(as.character(sampleidsdt$sample.ids), split="_"))
		mat <- matrix(temp, ncol=4, byrow=TRUE)
		matdat <- as.data.table(mat)
		sampleidsdt$population <- matdat$V3
		sampleidsdt$population <- ifelse(sampleidsdt$population=="Dcat", "DCat", sampleidsdt$population)
		sampleidsdtsub <- sampleidsdt[population=="D8" | population=="DBunk" | population=="DCat" |
			population=="D10" | population=="DLily" | population=="DMud" | population=="DOil" |
			population=="Dramp" | population=="W1" | population=="W6"]

		samplestouseB <- sampleidsdtsub[sample.ids!="Spring_2017_DBunk_340" &
		sample.ids!="March20_2018_DBunk_39" & sample.ids!="Fall_2016_D10_54" &
		sample.ids!="March20_2018_D8_19" & sample.ids!="March15_2019_DBunk_MomPE1" &
		sample.ids!="March15_2019_DBunk_MomPE20" & sample.ids!="April_2017_Dbarb_11" &
		sample.ids!="March20_2018_DBunk_26" & sample.ids!="March20_2018_DBunk_37" &
		sample.ids!="March20_2018_DBunk_42" & sample.ids!="March20_2018_DBunk_10" &
		sample.ids!="March20_2018_DBunk_18" & sample.ids!="March20_2018_DBunk_21" &
		sample.ids!="March20_2018_DBunk_22" & sample.ids!="March20_2018_DBunk_23" &
		sample.ids!="March20_2018_DBunk_38" & sample.ids!="March20_2018_DBunk_40" &
		sample.ids!="March20_2018_DBunk_41" & sample.ids!="March20_2018_DBunk_43" &
		sample.ids!="2018_Pulicaria_Pond21_22" & sample.ids!="2018_Pulicaria_Pond22_21" &
		sample.ids!="2018_Pulicaria_Pond22_53" & sample.ids!="2018_Pulicaria_Pond22_62" &
		sample.ids!="2018_Pulicaria_Pond22_72" & sample.ids!="April_2017_D8_515R" &
		sample.ids!="Lab_2019_D8_222Male" & sample.ids!="Lab_2019_D8_349Male" &
		sample.ids!="May_2017_D8_731SM" & sample.ids!="May_2017_D8_770SM" &
		sample.ids!="May_2017_D8_773SM" & sample.ids!="Spring_2017_DBunk_116SM" &
		sample.ids!="Spring_2017_DBunk_347SM" & sample.ids!="Spring_2017_DBunk_73SM" &
		sample.ids!="Spring_2016_D8_8.1" & sample.ids!="March_2018_D8_18030" &
		sample.ids!="March_2018_DCat_18004"]

		samplestouseBids <- samplestouseB$sample.ids

		seqSetFilter(genofile, sample.id=samplestouseBids)

### set some global parameters
		maf <- 0.001
		missing.rate <- 0.15
		threads <- 10

### SNP pruning (removing lab generated clones)
		set.seed(10000)
		snpset01 <- snpgdsLDpruning(genofile, snp.id=snpsvarpulexpresentinhalf, sample.id=samplestouseB,
		autosome.only=FALSE, maf=maf,missing.rate=missing.rate, slide.max.bp=500, ld.threshold=0.1)
		finalsetsnpset01 <-unlist(snpset01[c(1:62)])
		finalsetsnpset01dt <- as.data.table(finalsetsnpset01)

		save(finalsetsnpset01, file="finalsetsnpset01_20200623.Rdata")
		#This resulted in 150,455 SNPs

		seqSetFilter(genofile, variant.id=finalsetsnpset01)

		snpsvarPulexLDprune <- data.table(variant.ids = seqGetData(genofile, "variant.id"),
				chr = seqGetData(genofile, "chromosome"),
				pos = seqGetData(genofile, "position"),
				dp = seqGetData(genofile, "annotation/info/DP"))

		write.table(snpsvarPulexLDprune, file="finalsetsnpset01pulex_table_20200623", sep="\t", row.names=FALSE, quote=FALSE)

### IBS

#First lets try IBS with we keep SNPs present in 1 individuals
		### set some global parameters
			maf <- 0.001
			missing.rate <- 0.15
			threads <- 10

		samplestouseB <- samplestouseB[1:512]

		ibs <- snpgdsIBS(genofile, snp.id=finalsetsnpset01, sample.id=samplestouseB$sample.ids, num.thread=20, maf=maf,
					missing.rate=0.15, autosome.only = FALSE)

	### a bit of re-formating of the ibs matrix
		ibs.mat <- ibs$ibs
		rownames(ibs.mat) <- ibs$sample.id
		colnames(ibs.mat) <- ibs$sample.id

	### make the IBs matrix long form
		ibs.matdt <- as.data.table(ibs.mat)
		ibs.matdt$cloneA <- samplestouseB$sample.ids
		ibs.long<- melt(ibs.matdt, measure.vars=samplestouseB$sample.ids, variable.name="cloneB", value.name="IBS")

		ibs.long <- na.omit(ibs.long)

		ibs.longnoident <- ibs.long[ibs.long$cloneA!=ibs.long$cloneB]
		ibs.longnoident$cloneA <- as.factor(ibs.longnoident$cloneA)


		#Let's also remove duplicated comparisons - how to do this?
			ibs.longnoident$cloneAnum <- as.numeric(ibs.longnoident$cloneA)
			tmpnum <- data.table(cloneB=ibs.longnoident$cloneA, cloneBnum=ibs.longnoident$cloneAnum)
			tmpnumu <- unique(tmpnum)
			setkey(ibs.longnoident, cloneB)
			setkey(tmpnumu, cloneB)
			mibs.longnoident <- merge(ibs.longnoident, tmpnumu)
			mibs.longnoident$CloneNumComb <- ifelse(mibs.longnoident$cloneAnum > mibs.longnoident$cloneBnum,
				paste(mibs.longnoident$cloneAnum,mibs.longnoident$cloneBnum,sep="_"),
				paste(mibs.longnoident$cloneBnum,mibs.longnoident$cloneAnum,sep="_"))
			setkey(mibs.longnoident, CloneNumComb)
			ibs.longnoidentunique <- unique(mibs.longnoident, by="CloneNumComb")
		#Now get back to the original three columns
			ibs.longunique <- data.table(cloneA=ibs.longnoidentunique$cloneA,
				cloneB=ibs.longnoidentunique$cloneB, IBS=ibs.longnoidentunique$IBS)

				ggplot(data=ibs.longunique, aes(x=IBS)) + geom_histogram(binwidth=0.001) +
				geom_vline(xintercept = 0.965, color="red") +
   theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
   panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))

	### Identify cutoff by graphing

		initialIBSdist <- ggplot(data=ibs.long, aes(x=IBS)) + geom_histogram(binwidth=0.001)
		ggsave(initialIBSdist, file="initialIBSdist_20200623.pdf")

		constrainedIBSdist <- ggplot(data=ibs.long[IBS > 0.92 & IBS < 0.99], aes(x=IBS)) + geom_histogram(binwidth=0.001)
		ggsave(constrainedIBSdist, file="constrainedIBSdist_20200623.pdf")

		constrainedIBSdistB <- ggplot(data=ibs.long[IBS > 0.95 & IBS < 0.97], aes(x=IBS)) + geom_histogram(binwidth=0.001)
		ggsave(constrainedIBSdistB, file="constrainedIBSdistB_20200623.pdf")

		### Identify superclones
			### give temporary labels to super clones based on identity of clone B
					superclone <- ibs.long[IBS>.965]
					superclone[,SC.sub := as.numeric(as.factor(cloneB))]

			### collapse nested superclones
					superclone.o <- foreach(sc.i=unique(superclone$SC.sub), .combine="c")%do%{
							paste(sort(unique(superclone[cloneB%in%superclone[SC.sub==sc.i]$cloneA]$cloneA)), collapse=";")
							}

					superclone.o.uniq <- unique(superclone.o)

					sc.dt <- foreach(i=superclone.o.uniq, .combine="rbind")%do%{
								data.table(clone=strsplit(i, ";")[[1]],
								superClone.size=length(strsplit(i, ";")[[1]]),
								superClone.index=which(i==superclone.o.uniq))
					}
					sc.dt[,superClone.sizeRank := as.numeric(as.factor(rank(-superClone.size, ties="average")))]

					sc.dt <- as.data.table(sc.dt %>%
							mutate(SCnum = group_indices_(sc.dt, .dots=c("superClone.sizeRank", "superClone.index"))))

					#temp <- unlist(strsplit(sc.dt$clone, split="_"))
					#mat <- matrix(temp, ncol=4, byrow=TRUE)
					#matdat <- as.data.table(mat)
					#sc.dt$population <- matdat$V3
					#sc.dt$year <- matdat$V2

					save(sc.dt, file="tmp_sc.dt_20200623.Rdata")

					### do plot to make sure our head is screwed on correctly
					plot(superClone.sizeRank ~ superClone.size, sc.dt)

					### label superclones with letters. What do you do when you have more than 26 superclones?
							sc.dt[,SC:=LETTERS[SCnum]]
							sc.dt$SC <- ifelse(sc.dt$SCnum==27, "AA", ifelse(sc.dt$SCnum==28, "AB", ifelse(sc.dt$SCnum==29, "AC",
									ifelse(sc.dt$SCnum==30, "AD", ifelse(sc.dt$SCnum==31, "AE", ifelse(sc.dt$SCnum=="32", "AF", sc.dt$SC))))))
							sc.dt$SC <- ifelse(sc.dt$SCnum==33, "AG", ifelse(sc.dt$SCnum==34, "AH", ifelse(sc.dt$SCnum==35, "AI",
									ifelse(sc.dt$SCnum==36, "AJ", ifelse(sc.dt$SCnum==37, "AK", ifelse(sc.dt$SCnum=="38", "AL", sc.dt$SC))))))
							sc.dt$SC <- ifelse(sc.dt$SCnum==39, "AM", ifelse(sc.dt$SCnum==40, "AN", ifelse(sc.dt$SCnum==41, "AO",
									ifelse(sc.dt$SCnum==42, "AP", ifelse(sc.dt$SCnum==43, "AQ", sc.dt$SC)))))
							#sc.dt$SC <- ifelse(sc.dt$SCnum==45, "AS", ifelse(sc.dt$SCnum==46, "AT", ifelse(sc.dt$SCnum==47, "AU",
							#		ifelse(sc.dt$SCnum==48, "AV", ifelse(sc.dt$SCnum==49, "AW", ifelse(sc.dt$SCnum=="50", "AX", sc.dt$SC))))))
							#sc.dt$SC <- ifelse(sc.dt$SCnum==51, "AY", ifelse(sc.dt$SCnum==52, "AZ", sc.dt$SC))

					### rename singleton individuals to "OO" to follow Karen's convention
							sc.dt[superClone.size==1, SC:="OO"]

							temp <- unlist(strsplit(sc.dt$clone, split="_"))
							mat <- matrix(temp, ncol=4, byrow=TRUE)
							matdat <- as.data.table(mat)
							sc.dt$population <- matdat$V3
							sc.dt$year <- matdat$V2

							seqSetFilter(genofile, variant.id=finalsetsnpset01)

							dp <- t((seqGetData(genofile, "annotation/format/DP"))$data)
							dp <- as.data.table(dp)

							colnames(dp) <- c(seqGetData(genofile, "sample.id"))
							dp$variant.ids <- seqGetData(genofile, "variant.id")

							dplong <- melt(dp, measure.vars=samplestouseB, variable.name="clone", value.name="dp")
							dplong.ag <- dplong[,list(medrd = median(dp, na.rm=TRUE)), list(clone)]


							setkey(dplong.ag, clone)
							setkey(sc.dt, clone)
							sc.dtwsc <- merge(sc.dt, dplong.ag)


							write.table(sc.dtwsc, file="Superclones201617182019withObtusaandPulicaria_20200402", sep="\t", row.names=FALSE, quote=FALSE)
